#!/usr/bin/env python3
import i3ipc, os, subprocess
 
i3 = i3ipc.Connection()

def get_config(block_name, xresource_name, default=""):
    try:
        return os.environ[block_name]
    except KeyError:
        return subprocess.check_output(
            ['xrescat', f'i3xrocks.{xresource_name}', default]
        ).decode()
        
split_v_text = get_config('icon_split_v', 'label.split.vertical', '')
split_h_text = get_config('icon_split_h', 'label.split.horizontal', '')
split_none_text = get_config('icon_split_none','label.split.none', '')
label_icon = get_config('icon','label.split', '')

value_colour = get_config('color', 'value.color', "#D8DEE9")
label_colour = get_config('label_color', 'label.color', "#7B8394")
value_font = get_config('font', 'value.font', "Source Code Pro Medium 13")


layout_text_map = {
    'splitv': split_v_text,
    'splith': split_h_text    
}


def update_display(layout=None):
    layout_text = layout_text_map.get(layout, split_none_text)
    print(f'<span color="{label_colour}">{label_icon}</span><span font_desc="{value_font}" color="{value_colour}"> {layout_text}</span>', flush=True)

 
def on_event(self, _):
    parent = i3.get_tree().find_focused().parent
    update_display(parent.layout)
 
 
# Subscribe to events
i3.on("window::focus", on_event)
i3.on("binding", on_event)

update_display()

# Start the main loop and wait for events to come in.
i3.main()
